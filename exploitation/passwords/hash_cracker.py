#!/usr/bin/env python3

# IMPORTS
import argparse 
import csv
import hashlib

# --------------------------------------------------------------------------- ARGUMENTS PARSING ---------------------------------------------------------------------------

HASHING_ALGOS = ["md5", "sha1", "sha256", "sha512"]
parser = argparse.ArgumentParser()

parser.add_argument('-hash', '--target_hash', type=str, help="Target hash.")
parser.add_argument('-hl', '--hashes_list', type=str, help="Hahses list.")
parser.add_argument('-ptl', '--pt_wordlist', type=str, help="Plaintexts wordlist.", required=True)
parser.add_argument('-a', '--hashing_algorithm', type=str, default="md5", choices=HASHING_ALGOS, help="Hashing algorithm.")
parser.add_argument('-o', '--output_file_path', type=str, help="File path for the output file")

args = parser.parse_args()

# --------------------------------------------------------------------------- ARGUMENTS VALIDATION ---------------------------------------------------------------------------

## ------------------------- HASHES ARGS VALIDATION -------------------------

hashes_args = [args.target_hash, args.hashes_list]

#  Options -hash (--target_hash) and -hwl (--hashes_list) are not used together.
if all(item is not None for item in hashes_args):
    raise Exception("[-] Error: The options -hash (--target_hash) and -hwl (--hashes_list) cannot be used together.")

# One of the options -hash (--target_hash) and -hwl (--hashes_list) must be specified.
if all(item is None for item in hashes_args): 
    raise Exception("[-] Error: You must specify one of the following options: -hash (--target_hash) and -hwl (--hashes_list)")

# --------------------------------------------------------------------------- PLAINTEXT CRACKING LOGIC ---------------------------------------------------------------------------

def open_file(path, mode):
    
    try:
        return open(path, mode)
    except:
        raise Exception(f"[-] Error: The file \"{path}\" could not be opened.")
    

def export_plaintexts(out_plaintexts_file_path, plaintexts):
    try:
        credentials_file = open_file(out_plaintexts_file_path, "w")
        file_headers = plaintexts[0].keys()

        writer = csv.DictWriter(credentials_file, fieldnames=file_headers)

        writer.writeheader() 
        writer.writerows(plaintexts)
        print(f"[+] Plaintexts were successfully written to the file: \"{out_plaintexts_file_path}\"")
    except:
        raise Exception(f"[-] Error: Failed to write plaintexts to the file:  \"{out_plaintexts_file_path}\"")

def verify_hash(target_hash, plaintext, hashing_algorithm):
    print(f"[i] Trying to crack target hash: \"{target_hash}\" | Word: \"{plaintext}\"")

    try:
        hash_obj = hashlib.new(hashing_algorithm)
        hash_obj.update(plaintext.encode())
        hash_value = hash_obj.hexdigest()

        hashes_comparison =  target_hash == hash_value

        if hashes_comparison:
            print(f"\n[+] Hash cracked: \"{target_hash}\" | Plaintext: \"{plaintext}\"\n")

    except:
        hashes_comparison = False

    return hashes_comparison

def crack_single_hash_wordlist(target_hash, pt_wordlist_path, hashing_algorithm):
    ptl_handler = open_file(pt_wordlist_path, "rt")
    plaintext = ptl_handler.readline().strip()

    while plaintext:
        hash_matches = verify_hash(target_hash, plaintext, hashing_algorithm)

        if hash_matches:
            return {"Hash":target_hash, "Plaintext":plaintext}
        
        plaintext = ptl_handler.readline().strip()
    
    ptl_handler.close()

    return None

def crack_multi_hash_wordlist(hashes_list_path, pt_wordlist_path, hashing_algorithm):
    cracked_hashes = []

    hwl_handler = open_file(hashes_list_path, "rt")
    target_hash = hwl_handler.readline().strip()

    while target_hash:
        partial_hashes = crack_single_hash_wordlist(target_hash, pt_wordlist_path, hashing_algorithm)
        cracked_hashes.append(partial_hashes)
        target_hash = hwl_handler.readline().strip()

    return cracked_hashes

def crack_hashes(target_hash=None, hashes_list=None, pt_wordlist=None, hashing_algorithm=None):
    # Single hash and plaintext wordlist
    if target_hash and pt_wordlist:
        return [crack_single_hash_wordlist(target_hash, pt_wordlist, hashing_algorithm)]
    
    # Hashes list and plaintext wordlist
    elif hashes_list and pt_wordlist:
        return crack_multi_hash_wordlist(hashes_list, pt_wordlist, hashing_algorithm)
    else:
        return []
        

# --------------------------------------------------------------------------- MAIN ---------------------------------------------------------------------------

def main():
    cracked_hashes = crack_hashes(target_hash=args.target_hash, 
                              hashes_list=args.hashes_list,
                              pt_wordlist=args.pt_wordlist, 
                              hashing_algorithm=args.hashing_algorithm
                              )

    if args.output_file_path and cracked_hashes:
        export_plaintexts(args.output_file_path, cracked_hashes)

if __name__ == "__main__":
    main()
